made a clean directory bdgforth

uv init bdgforth

uv add numba llvmlite

uv run main.py

added stuff to GitHub
  note - uv makes a .git directory that maybe I should have just
  imported into gitKraken, somehow?


YouTube series
CodeCrux
https://www.youtube.com/playlist?list=PLGY0au-SczlkeccjBFsLIE_BKp_sRfEdb

his forth implementation in Swift:
https://github.com/josephkreydt/cruxForth



References "Build Yourself a Forth"
https://beza1e1.tuxen.de/articles/forth.html


Forth Standard
https://forth-standard.org/

GForth
https://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Tutorial.html#Tutorial




TODO
- allow bye from inside user func
- conditionals
  - if/then
  - if/then/else
  - keep track of an "IF/THEN/ELSE" stack, emitting branch/branch?
    instructions with dummy targets that get fixed up as the stack
    gets unwrapped
- loops
  - do/repeat
  - do/while
- checking words at compile time, not (just) at runtime
- run FORTH script(s) from command line
  - for testing
  - as import of library
- variables
  - global, outside of functions
  - local to functions
  - special syntactic sugar to bind args
    - {a b c}
    - would be handy at the top of a function, but wouldn't need to
      be; could throw it in the middle of a function, if I suddenly
      had a bunch of values on the stack that I wanted to grab.
- cleanup parsing (compile and interpret duplicate code)
- floating point values
- booleans as first-class types
- strings
  - print
  - input
- real compilation via LLVM(lite)
  - to native
  - to wasm (emscripten)
- draw mandelbrot set
- some sort of pi approximation

DONE
- return
- branch / branch?
  - requires rewriting the "compile" function to enumerate tokens



TESTS

: br_test 1 2 branch -7 3 ;
br_test stack
( should show 1 3 )

: br_cond_test 1 2 1 branch? -8 4 ;
( should show 1 4 )

: br_cond_test_f 1 2 0 branch? -9 5 ;
( should show 1 -9 5 )

: return_test 1 2 3 return 4 5 6 ;
(should show 1 2 3)

: if_true_test_1 1 if 2 3 then ;
(should show 2 3)

: if_false_test_1 7 0 if 2 3 then ;
(should show 7)

: nested_if_test_1 1 if 1 if 7 then 8 then 9 ;
(should show 7 8 9)

2 3 + .
(should show 5)
